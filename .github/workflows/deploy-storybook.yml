name: Deploy Storybook

on:
  workflow_call: 
    inputs: 
      ref_type:
        type: string
        description: 'Type of reference to deploy'
        required: true
      checkout_ref:
        description: 'Branch/Tags to deploy (accomfe-ui@1.0.3, master, etc.)'
        required: true
        default: 'master'
        type: string
  workflow_dispatch:
    inputs: 
      ref_type:
        type: choice
        description: 'Type of reference to deploy'
        required: true
        options:
          - tags
          - branch
      checkout_ref:
        description: 'Branch/Tags to deploy (accomfe-ui@1.0.3, master, etc.)'
        required: true
        default: 'master'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref_type == 'tags' && 'refs/tags/' || '' }}${{ inputs.checkout_ref }}

      - name: Get Latest Commit in Branch
        run: |
          echo "Latest commit in branch ${{ inputs.checkout_ref }}: $(git rev-parse HEAD)"
          echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v4
      #   with:
      #     # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
      #     node-version-file: .nvmrc
      #     cache: 'yarn'
      
      # - name: Run install
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: install --frozen-lockfile # will run `yarn install` command
      
      # - name: Build static storybook
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: build-storybook -o storybook-static

      # Step 2: Generate a JSON file
      - name: Generate deployment info JSON
        run: |
          echo '{
            "source": "${{ inputs.ref_type == 'tags' && 'refs/tags/' || '' }}${{ inputs.checkout_ref }}",
            "last_commit": "'$LATEST_COMMIT'"
          }' > whoami.html

      # Step 3: Create a directory for deployment (if needed)
      - name: Prepare deployment directory
        run: |
          mkdir -p deployment
          mv whoami.html deployment/

      # Step 4: Upload the directory to GitHub Pages
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: deployment
  
  deploy:
    permissions:
      contents: read
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    steps:
      - name: deploy artifact
        id: deployment
        uses: actions/deploy-pages@v4
